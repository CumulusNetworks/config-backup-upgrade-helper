# Usage: ansible-playbook -l hostglob -t tags test_compare_script.yml
#
# Attempt to do the following:
# copy config_file_changes and ppc_slot_setup to routers in list
# execute script - output is redirected to a file
# copy output file off of router
# Loop this through all the versions v2.5.1-2.5.6, then back down, then 2.5.1 -> 2.5.6 and 2.5.6->2.5.1
# Install 3rd party packages and test if 1) config files are preserved and 2-future) script reports them


- hosts: upgradeTest
  user: cumulus
  sudo: true
  gather_facts: yes

  vars:
    ansible_sudo_pass: 'cn321'
    ansible_ssh_pass: 'cn321'
    version2: '2.5.4'
    version: '2.5.7'
    marker: '## config_file_changes script testing marker'
    file_list: 
      - '/etc/network/interfaces'
      - '/etc/hostname'
      - '/etc/timezone'
      - '/etc/cumulus/ports.conf'
    #Decide if messing with timezone file is breaking the timezone logic
    blacklistedfile: '/etc/bcm.d/testfile.txt'
    script_conf: '/etc/slotsync.conf'

  tasks:
    
    - fail: msg="This script only works on CL 2.x. This router is running 3.x"
      when: ansible_lsb.major_release|int > 2
      
      
    - name: copy compare script
      copy: src=files/upgrade_scripts/config_file_changes dest=/home/cumulus/ force=yes mode=0755
      sudo: no
      tags: copy

      # Note, if these two scripts were integrated into one, I could use the script module
    - name: copy ppc_slot_setup script
      copy: src=files/upgrade_scripts/ppc_slot_setup dest=/home/cumulus/ force=yes mode=0755
      when: ansible_machine == "ppc"
      sudo: no
      tags: copy

      #x86_64 


    - name: add marker to files in file_dct
      lineinfile: dest={{item}} line='{{marker}}'
      with_items: file_list
      tags: mark

    - name: create blacklisted file
      file: path={{ blacklistedfile }} state=touch
      tags: blacklist
    - name: add marker  blacklisted file
      lineinfile: dest={{blacklistedfile }} line='{{marker}}'
      tags: blacklist

    - name: create junk in /mnt/persist
      file: path=/mnt/persist/junk state=directory mode=0755
      tags: junk
    - name: create file in junk
      file: path=/mnt/persist/junk/junkfile state=touch mode=0444
      tags: junk

    #- name: check for mark on file for traceability
    #  command: egrep '^{{marker}}$' /etc/network/interfaces
      #{{item.key}}
    #  register: output

    #- debug: var=output
    #  tags: mark
      #{{item.value}}
      #{{item.key.value}}: 'yes'
      #changed_when: False
      #with_dict:  "{{ file_dct }}"

#    - name: mark unmarked files
#      shell: echo {{marker}} >> {{item.key}}
#      #debug: msg="Marking file "
#      when: {{item.value}} == 0
#      with_dict:  {{file_dct}}
#      tags: mark

    - name: install alternate image  
      cl_img_install: src=http://mon/release/CumulusLinux-{{version}}-{{arch}}.bin switch_slot=yes
      tags: install

    - name: execute compare script
      shell: '/home/cumulus/config_file_changes -s -f -v'
      tags: execute

    - name: Grab results
      fetch: src=/etc/slotsync.conf dest=files/test_compare_script/{{inventory_hostname}}-{{version}}
      tags: results
      
    - name: test something got logged
      stat: path=/var/log/config_file_changes.log
      register: log
      tags:
        - assert_logged
        - tests

    - name: assert something got logged
      assert: 
        that:
          - log.stat.exists == true
          - log.stat.size > 12
        msg: "/var/log/config_file_changes.log either not created or not written to"
  
      #failed_when: log.stat.exists != true or log.stat.size < 12
      tags:
        - assert_logged
        - tests


    - name: reboot to alternate image
      command: reboot
      async: 0
      poll: 0
      ignore_errors: true
      tags: reboot


    - name: wait for switch to come back
      local_action: wait_for host={{ inventory_hostname }} state=started port=22 delay=20
      sudo: false
      tags: wait

    - name: assert all files got copied
      command: grep '{{marker}}' {{item}}
      register: g
      changed_when: "g.rc != 0"
      failed_when: "g.rc != 0"
      with_items: file_list
      tags: 
        - assert_copied
        - tests


    #- name: assert thirdparty config got copied
    #  stat: path=/etc/{{ thirdpartyconf }}
    #  register: f
    #  failed_when: "f.stat.exists == False"
    #  tags: 
    #    - assert_thirdpartycopied
    #    - tests


    - name: test junk file and dir are removed
      stat: path=/mnt/persist/junk
      register: junk
      tags:
        - assert_junk 
        - tests

    - name: assert junk file and dir are removed
      assert: 
        that:
          - junk.stat.exists != true
        msg: "Junk directory still exists. Fail!"
      tags: 
        - assert_junk
        - tests


    - name: assert blacklisted file did not get copied
      stat: path={{  blacklistedfile }}
      register: blacklisted
      failed_when: blacklisted.stat.exists
      tags: 
        - assert_blacklist_worked
        - tests

    - name: assert script configuration exists in target slot
      stat: path={{  script_conf }}
      register: script_conf
      failed_when: script_conf.stat.exists != true
      tags: 
        - assert_configuration_migrated
        - tests


#########
# Now load 2nd image and retest
#########
    #
    #- name: install alternate image  
    #  cl_img_install: src=http://mon/release/CumulusLinux-{{version2}}-{{arch}}.bin switch_slot=yes
    #  tags: install
    #
    #- name: execute compare script
    #  shell: '/home/cumulus/config_file_changes -s -f -v'
    #  tags: execute
    #
    #- name: Grab results
    #  fetch: src=/etc/slotsync.conf dest=files/test_compare_script/{{inventory_hostname}}-{{version2}}
    #  tags: results
    #  
    #- name: test something got logged
    #  stat: path=/var/log/config_file_changes.log
    #  register: log
    #  tags:
    #    - assert_logged
    #    - tests
    #
    #- name: assert something got logged
    #  assert: 
    #    that:
    #      - log.stat.exists == true
    #      - log.stat.size > 12
    #    msg: "/var/log/config_file_changes.log either not created or not written to"
    #
    #  #failed_when: log.stat.exists != true or log.stat.size < 12
    #  tags:
    #    - assert_logged
    #    - tests
    #
    #
    #- name: reboot to alternate image
    #  command: reboot
    #  async: 0
    #  poll: 0
    #  ignore_errors: true
    #  tags: reboot
    #
    #
    #- name: wait for switch to come back
    #  local_action: wait_for host={{ inventory_hostname }} state=started port=22 delay=20
    #  sudo: false
    #  tags: wait
    #
    #- name: assert all files got copied
    #  command: grep '{{marker}}' {{item}}
    #  register: g
    #  changed_when: "g.rc != 0"
    #  failed_when: "g.rc != 0"
    #  with_items: file_list
    #  tags: 
    #    - assert_copied
    #    - tests
    #
    #
    ##- name: assert thirdparty config got copied
    ##  stat: path=/etc/{{ thirdpartyconf }}
    ##  register: f
    ##  failed_when: "f.stat.exists == False"
    ##  tags: 
    ##    - assert_thirdpartycopied
    ##    - tests
    #
    #
    #- name: test junk file and dir are removed
    #  stat: path=/mnt/persist/junk
    #  register: junk
    #  tags:
    #    - assert_junk 
    #    - tests
    #
    #- name: assert junk file and dir are removed
    #  assert: 
    #    that:
    #      - junk.stat.exists != true
    #    msg: "Junk directory still exists. Fail!"
    #  tags: 
    #    - assert_junk
    #    - tests
    #
    #
    #- name: assert blacklisted file did not get copied
    #  stat: path={{  blacklistedfile }}
    #  register: blacklisted
    #  failed_when: blacklisted.stat.exists
    #  tags: 
    #    - assert_blacklist_worked
    #    - tests
    #
    #- name: assert script configuration exists in target slot
    #  stat: path={{  script_conf }}
    #  register: script_conf
    #  failed_when: script_conf.stat.exists != true
    #  tags: 
    #    - assert_configuration_migrated
    #    - tests





## Note, in ansible 1.9.4, this modification needs to be made for the reboot
#- name: restart machine
#  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
#  async: 1
#  poll: 0
#  sudo: true
#  ignore_errors: true

#- name: waiting for server to come back
#  local_action: wait_for host={{ inventory_hostname }} state=started delay=30 timeout=300
#  sudo: false
